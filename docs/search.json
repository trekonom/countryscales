[{"path":"https://trekonom.github.io/countryscales/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 gscales authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://trekonom.github.io/countryscales/articles/background.html","id":"the-solution","dir":"Articles","previous_headings":"","what":"The solution","title":"Background","text":"first simple solution problem add simple wrappers beginning R script R markdown document like end copy pasting one report next, sooner later probably put helpers inside package. ’s goal countryscales: Providing ---box helpers format numbers using country-specific style conventions. first example consider formatting number according style conventions used Germany several European countries dot (.) used big mark grouping mark thousands seperator comma (,) decimal mark. Using scales::label_number requires switch default decimal big marks: Using countryscales achieved less typing using countryscales::label_number_de: provide example using countryscales ggplot2 let’s first prepare small example dataset top 10 countries according population size: basic example let’s make simple barchart population size country chart fine ’s ready publication. Let’s say want display population sizes x axis decimal format additionally add share country World population formatted percentages labels bars using German style conventions. Using scales achieved like : {style-scales} p +   # Add percentages bars using German style conventions   geom_text(     aes(       label = label_percent(big.mark = \".\",                              decimal.mark = \",\",                              accuracy = .1)(pct)),      hjust = 1.1, size = 8 / .pt, color = \"white\") +   # Format numbers percentages   scale_x_continuous(     labels = label_number(big.mark = \".\",                            decimal.mark = \",\"),      expand = c(0, 0, .05, 0)) simple example shows displaying numbers decimal format percentages requires typing, especially want deviate default decimal grouping marks. ’s countryscales comes handy using label_percent_de scale_x_number_de achieved less typing like :","code":"my_label_number <- function() {   scales::label_number(big.mark = \".\", decimal.mark = \",\") } library(scales)  label_number(big.mark = \".\", decimal.mark = \",\", accuracy = .1)(x) #> [1] \"12.345.690,0\" library(countryscales)  label_number_de(accuracy = .1)(x) #> [1] \"12.345.690,0\" top10_pop <- gapminder15[order(-gapminder15$pop), c(\"country\", \"pop\")] top10_pop$pct <- top10_pop$pop / sum(top10_pop$pop) top10_pop <- head(top10_pop, 10) library(ggplot2)  p <- ggplot(top10_pop, aes(pop, reorder(country, pop))) +   geom_col() +   theme_minimal() +   theme(panel.grid.major = element_blank(),          panel.grid.minor = element_blank()) +   labs(     x = NULL, y = NULL,     title = \"Top 10 of countries by population size in 2015\",     caption = \"Data: gapminder.org\"   ) p +   # Add percentages to bars using German style conventions   geom_text(     aes(       label = label_percent_de(accuracy = .1)(pct)),      hjust = 1.1, size = 8 / .pt, color = \"white\") +   # Format numbers as percentages   scale_x_number_de(expand = c(0, 0, .05, 0))"},{"path":"https://trekonom.github.io/countryscales/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Moog. Author, maintainer.","code":""},{"path":"https://trekonom.github.io/countryscales/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Moog S (2023). countryscales: Country Scales. https://github.com/trekonom/countryscales, https://trekonom.github.io/countryscales/.","code":"@Manual{,   title = {countryscales: Country Scales},   author = {Stefan Moog},   year = {2023},   note = {https://github.com/trekonom/countryscales, https://trekonom.github.io/countryscales/}, }"},{"path":"https://trekonom.github.io/countryscales/index.html","id":"countryscales","dir":"","previous_headings":"","what":"Country Scales","title":"Country Scales","text":"countryscales extends scales package make easy display numbers according country-specific style conventions. Additionally countryscales extends ggplot2 providing set positional scale functions make easy style axes displaying numbers, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Country Scales","text":"can install development version countryscales GitHub using:","code":"remotes::install_github(\"trekonom/countryscales\")"},{"path":"https://trekonom.github.io/countryscales/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Country Scales","text":"common use case countryscales customise appearance axis legend labels format numbers added labels plot using country-specific style conventions. first example consider formatting chart according style conventions used Germany several European countries dot (.) used big mark grouping mark thousands seperator comma (,) decimal mark. Using countryscales achieved using scale_x/y_xxx_locale label_xxx_locale family functions like :  Besides _locale family functions countryscales provides convenience functions common locales, e.g. format plot using Swiss style conventions achieve result using label_number_ch scale_x_number_ch like :","code":"library(countryscales) library(ggplot2) library(dplyr, warn.conflicts = FALSE)  base <- gapminder15 |>   count(region, wt = pop) |>   ggplot(aes(n, reorder(region, n), fill = region)) +   scale_fill_brewer(palette = \"Dark2\") +   geom_col(width = .6) +   theme_minimal() +   labs(x = NULL, y = NULL, title = \"Population by World Regions in 2015\") +   guides(fill = \"none\")  base +   geom_label(aes(label = label_number_locale(locale = \"de-DE\", accuracy = 1000)(n)),     hjust = 1, fill = NA, label.size = NA, color = \"white\"   ) +   scale_x_number_locale(locale = \"de-DE\", expand = expansion(mult = c(0, .05))) +   labs(subtitle = \"... using German style conventions.\") base +   geom_label(aes(label = label_number_ch(accuracy = 1000)(n)),     hjust = 1, fill = NA, label.size = NA, color = \"white\"   ) +   scale_x_number_ch(expand = expansion(mult = c(0, .05))) +   labs(subtitle = \"... using Swiss style conventions.\")"},{"path":"https://trekonom.github.io/countryscales/reference/countryscales-package.html","id":null,"dir":"Reference","previous_headings":"","what":"countryscales: Country Scales — countryscales-package","title":"countryscales: Country Scales — countryscales-package","text":"Make easy display numbers using country style conventions.","code":""},{"path":[]},{"path":"https://trekonom.github.io/countryscales/reference/countryscales-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"countryscales: Country Scales — countryscales-package","text":"Maintainer: Stefan Moog moogs@gmx.de","code":""},{"path":"https://trekonom.github.io/countryscales/reference/currency-symbols.html","id":null,"dir":"Reference","previous_headings":"","what":"Currency symbols — currency-symbols","title":"Currency symbols — currency-symbols","text":"Currency symbols","code":""},{"path":"https://trekonom.github.io/countryscales/reference/currency-symbols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Currency symbols — currency-symbols","text":"","code":".euro  .dollar  .pound  .yen"},{"path":"https://trekonom.github.io/countryscales/reference/currency-symbols.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Currency symbols — currency-symbols","text":"object class character length 1. object class character length 1. object class character length 1. object class character length 1.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/demo_number.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplo2 demo — demo_number","title":"ggplo2 demo — demo_number","text":"ggplo2 demo","code":""},{"path":"https://trekonom.github.io/countryscales/reference/demo_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplo2 demo — demo_number","text":"","code":"demo_number(x, scale_name, ...)"},{"path":"https://trekonom.github.io/countryscales/reference/demo_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplo2 demo — demo_number","text":"x numeric scale_name scale name ... arguments passed scale","code":""},{"path":"https://trekonom.github.io/countryscales/reference/demo_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplo2 demo — demo_number","text":"","code":"demo_number(c(32, 212), scale_name = \"number_locale\") #> scale_x_number_locale()"},{"path":"https://trekonom.github.io/countryscales/reference/gapminder.html","id":null,"dir":"Reference","previous_headings":"","what":"Gapminder Dataset — gapminder","title":"Gapminder Dataset — gapminder","text":"dataset containing data GDP per capita, life expectancy population size 183 countries 1800 2015","code":""},{"path":"https://trekonom.github.io/countryscales/reference/gapminder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gapminder Dataset — gapminder","text":"","code":"gapminder  gapminder15"},{"path":"https://trekonom.github.io/countryscales/reference/gapminder.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gapminder Dataset — gapminder","text":"data frame 14,823 rows 7 variables: country country name code country code region world region year year life_exp life expectancy birth, years gdp_per_cap GDP per capita, dollars PPP pop population size, persons object class tbl_df (inherits tbl, data.frame) 183 rows 7 columns.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/gapminder.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Gapminder Dataset — gapminder","text":"http://www.gapminder.org/","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-ch.html","id":null,"dir":"Reference","previous_headings":"","what":"Swiss Style Formatting of Numbers — label-ch","title":"Swiss Style Formatting of Numbers — label-ch","text":"label_xxx_xxx family functions makes easy format numbers decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-ch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swiss Style Formatting of Numbers — label-ch","text":"","code":"label_number_ch(   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  number_ch(   x,   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  label_percent_ch(   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  percent_ch(   x,   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/label-ch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swiss Style Formatting of Numbers — label-ch","text":"accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Symbol display value. suffix Symbol display value. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed base::format(). x numeric","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-ch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Swiss Style Formatting of Numbers — label-ch","text":"_number ones format axis text numbers. _percent ones format axis text percentages. _dollar ones format axis text dollars. _euro ones format axis text euros.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-ch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Swiss Style Formatting of Numbers — label-ch","text":"","code":"demo_continuous(c(-1e6, 1e6),   labels = label_number_ch() ) #> scale_x_continuous(labels = label_number_ch())  demo_continuous(c(0, .01),   labels = label_percent_ch(accuracy = .01) ) #> scale_x_continuous(labels = label_percent_ch(accuracy = 0.01))"},{"path":"https://trekonom.github.io/countryscales/reference/label-de.html","id":null,"dir":"Reference","previous_headings":"","what":"German Style Formatting of Numbers — label-de","title":"German Style Formatting of Numbers — label-de","text":"label_xxx_xxx family functions makes easy format numbers decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"German Style Formatting of Numbers — label-de","text":"","code":"label_number_de(   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  number_de(   x,   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  label_percent_de(   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  percent_de(   x,   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/label-de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"German Style Formatting of Numbers — label-de","text":"accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Symbol display value. suffix Symbol display value. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed base::format(). x numeric","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"German Style Formatting of Numbers — label-de","text":"_number ones format axis text numbers. _percent ones format axis text percentages. _dollar ones format axis text dollars. _euro ones format axis text euros.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"German Style Formatting of Numbers — label-de","text":"","code":"demo_continuous(c(-1e6, 1e6),   labels = label_number_de() ) #> scale_x_continuous(labels = label_number_de())  demo_continuous(c(0, .01),   labels = label_percent_de(accuracy = .01) ) #> scale_x_continuous(labels = label_percent_de(accuracy = 0.01))"},{"path":"https://trekonom.github.io/countryscales/reference/label-locale.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting numbers — label-locale","title":"Formatting numbers — label-locale","text":"label_xxx_locale family functions makes easy format numbers decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-locale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting numbers — label-locale","text":"","code":"label_number_locale(   accuracy = NULL,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   locale = \"en-US\",   trim = TRUE,   ... )  label_percent_locale(   accuracy = NULL,   scale = 100,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   locale = \"en-US\",   trim = TRUE,   ... )  label_currency_locale(   accuracy = NULL,   scale = 1,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   p_sep_by = NULL,   n_sep_by = NULL,   currency = .dollar,   locale = \"en-US\",   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/label-locale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting numbers — label-locale","text":"accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Symbol display value. suffix Symbol display value. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. locale locale string. Defaults \"en-US\" trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed base::format(). p_sep_by separator currency symbol positive monteary value n_sep_by separator currency symbol negative monteary value currency symbol","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-locale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Formatting numbers — label-locale","text":"number ones format axis text numbers. percent ones format axis text percentages. dollar ones format axis text dollars. euro ones format axis text euros.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-us.html","id":null,"dir":"Reference","previous_headings":"","what":"US Style Formatting of Numbers — label-us","title":"US Style Formatting of Numbers — label-us","text":"label_xxx_xxx family functions makes easy format numbers decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-us.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US Style Formatting of Numbers — label-us","text":"","code":"label_number_us(   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  number_us(   x,   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  label_percent_us(   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  percent_us(   x,   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/label-us.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"US Style Formatting of Numbers — label-us","text":"accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Symbol display value. suffix Symbol display value. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed base::format(). x numeric","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-us.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"US Style Formatting of Numbers — label-us","text":"_number ones format axis text numbers. _percent ones format axis text percentages. _dollar ones format axis text dollars. _euro ones format axis text euros.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-us.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"US Style Formatting of Numbers — label-us","text":"","code":"demo_continuous(c(-1e6, 1e6),   labels = label_number_us() ) #> scale_x_continuous(labels = label_number_us())  demo_continuous(c(0, .01),   labels = label_percent_us(accuracy = .01) ) #> scale_x_continuous(labels = label_percent_us(accuracy = 0.01))"},{"path":"https://trekonom.github.io/countryscales/reference/label_euro.html","id":null,"dir":"Reference","previous_headings":"","what":"Label currencies (e.g. 2,5€, 50€ or $5,3, $100) — label_euro","title":"Label currencies (e.g. 2,5€, 50€ or $5,3, $100) — label_euro","text":"Format numbers currencies","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label_euro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label currencies (e.g. 2,5€, 50€ or $5,3, $100) — label_euro","text":"","code":"label_euro(   accuracy = NULL,   scale = 1,   big.mark = \" \",   decimal.mark = \".\",   prefix = \"\",   suffix = .euro,   trim = TRUE,   largest_with_cents = 1e+05,   negative_parens = FALSE,   ... )  euro(   x,   accuracy = 1,   scale = 1,   big.mark = \" \",   decimal.mark = \".\",   prefix = \"\",   suffix = .euro,   trim = TRUE,   largest_with_cents = 1e+05,   negative_parens = FALSE,   ... )  label_euro_de(   accuracy = 1,   scale = 1,   big.mark = \".\",   decimal.mark = \",\",   prefix = \"\",   suffix = .euro,   trim = TRUE,   largest_with_cents = 1e+05,   negative_parens = FALSE,   ... )  euro_de(   x,   accuracy = 1,   scale = 1,   big.mark = \".\",   decimal.mark = \",\",   prefix = \"\",   suffix = .euro,   trim = TRUE,   largest_with_cents = 1e+05,   negative_parens = FALSE,   ... )  label_dollar_de(   accuracy = 1,   scale = 1,   big.mark = \".\",   decimal.mark = \",\",   prefix = .dollar,   suffix = \"\",   trim = TRUE,   largest_with_cents = 1e+05,   negative_parens = FALSE,   ... )  dollar_de(   x,   accuracy = 1,   scale = 1,   big.mark = \".\",   decimal.mark = \",\",   prefix = .dollar,   suffix = \"\",   trim = TRUE,   largest_with_cents = 1e+05,   negative_parens = FALSE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/label_euro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label currencies (e.g. 2,5€, 50€ or $5,3, $100) — label_euro","text":"accuracy, largest_with_cents Number round . NULL, default, values rounded nearest integer, unless values non-zero fractional component (e.g. cents) largest value less largest_with_cents default 100,000. scale scaling factor: x multiplied scale formatting. useful underlying data small large. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. prefix, suffix Symbols display value. trim Logical, FALSE, values right-justified common width (see base::format()). negative_parens Use style_negative = \"parens\" instead. ... additional arguments passed label_dollar, etc. x vector","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label_euro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Label currencies (e.g. 2,5€, 50€ or $5,3, $100) — label_euro","text":"German wrapper around scales::label_dollar default big.mark = \".\" decimal.mark = \",\". euro_de prefix defaults \"\" suffix euro sign, dollar_de prefix defaults \"$\" suffix \"\".","code":""},{"path":[]},{"path":"https://trekonom.github.io/countryscales/reference/label_euro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label currencies (e.g. 2,5€, 50€ or $5,3, $100) — label_euro","text":"","code":"# ex-label_euro_de.R set.seed(42) x <- 100 * runif(10) # Formatting numbers as currencies euro_de(x) #> Warning: The `negative_parens` argument of `dollar()` is deprecated as of scales 1.2.0. #> ℹ Please use the `style_negative` argument instead. #> ℹ The deprecated feature was likely used in the scales package. #>   Please report the issue at <https://github.com/r-lib/scales/issues>. #>  [1] \"91€\" \"94€\" \"29€\" \"83€\" \"64€\" \"52€\" \"74€\" \"13€\" \"66€\" \"71€\" dollar_de(x, accuracy = .1) #>  [1] \"$91,5\" \"$93,7\" \"$28,6\" \"$83,0\" \"$64,2\" \"$51,9\" \"$73,7\" \"$13,5\" \"$65,7\" #> [10] \"$70,5\" # For other currencies or if you want to switch the position # of the currency symbol switch the suffix and/or prefix # Dollar symbol after number euro_de(x, suffix = .dollar) #>  [1] \"91$\" \"94$\" \"29$\" \"83$\" \"64$\" \"52$\" \"74$\" \"13$\" \"66$\" \"71$\" # British pound before number dollar_de(x, prefix = .pound) #>  [1] \"£91\" \"£94\" \"£29\" \"£83\" \"£64\" \"£52\" \"£74\" \"£13\" \"£66\" \"£71\" # For use as labeller e.g. with ggplot2 library(ggplot2) p <- ggplot(gapminder15, aes(gdp_per_cap, life_exp)) +   geom_point() # Dollar prefix p +   scale_x_continuous(labels = label_dollar_de())  # Euro suffix p +   scale_x_continuous(labels = label_euro_de())"},{"path":"https://trekonom.github.io/countryscales/reference/label_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Labeling Functions Factory — label_factory","title":"Labeling Functions Factory — label_factory","text":"Creates source code add new labeling functions","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Labeling Functions Factory — label_factory","text":"","code":"label_factory(iso2, unit, country, adjectival, params = list())"},{"path":"https://trekonom.github.io/countryscales/reference/label_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Labeling Functions Factory — label_factory","text":"iso2 character. Country code appended unit charatcer. One \"number\", \"percent, \"dollar\" \"euro country charatcer. Country label used docs. adjectival charatcer. Country adjectival used docs. params list. Specification labeling function. Default values.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label_factory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Labeling Functions Factory — label_factory","text":"","code":"params <- list(big.mark = \".\", decimal.mark = \",\", suffix = \"%\") label_factory(\"de\", \"percent\", \"Germany\", \"German\", params = params) #> Warning: Could not use colored = TRUE, as the package prettycode is not installed. Please install it if you want to see colored output or see `?print.vertical` for more information. #> #' German Number Formatting #> #' #> #' The label_xxx_de family of functions makes it easy to label numbers #> #'     in decimal format, as percentages or as currencies applying the number #> #'     formatting style used in Germany which uses a \",\" as the decimal mark #> #'     and a \".\" as the thousands seperator. #> #' #> #' All label_() functions return a \"labelling\" function, i.e. a function #> #' that takes a vector x and returns a character vector of length(x) giving #> #' a label for each input value. #> #' #> #' Use #> #'  * `label_number_de` to format numbers in decimal format. #> #'  * `label_percent_de` to format numbers as percentages. #> #'  * `label_dollar_de` to format numbers as dollars. #> #'  * `label_euro_de` to format numbers as euros. #> #' #> #' @inheritParams scales::label_number #> #' #> #' @export #> #' #> #' @examples #> #' demo_continuous(c(0, 1), labels = label_percent_de()) #> label_percent_de <- function(accuracy = NULL, #>                              scale = 1, #>                              big_mark = \".\", #>                              decimal_mark = \",\", #>                              prefix = \"\", #>                              suffix = \"%\", #>                              trim = TRUE, #>                              ...) { #>   label_percent(accuracy = accuracy, scale = scale, big.mark = big.mark, decimal.mark = decimal.mark, trim = trim, ...) #> }"},{"path":"https://trekonom.github.io/countryscales/reference/label_number_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Label numbers in decimal format (e.g. 0,12, 1.234) — label_number_de","title":"Label numbers in decimal format (e.g. 0,12, 1.234) — label_number_de","text":"Force decimal display numbers inserts point every three digits.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label_number_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label numbers in decimal format (e.g. 0,12, 1.234) — label_number_de","text":"","code":"label_number_de(   accuracy = 1,   scale = 1,   big.mark = \".\",   decimal.mark = \",\",   trim = TRUE,   ... )  number_de(   x,   accuracy = 1,   scale = 1,   big.mark = \".\",   decimal.mark = \",\",   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/label_number_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label numbers in decimal format (e.g. 0,12, 1.234) — label_number_de","text":"accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. trim Logical, FALSE, values right-justified common width (see base::format()). ... additional arguments passed label_number, etc. x vector","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label_number_de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Label numbers in decimal format (e.g. 0,12, 1.234) — label_number_de","text":"German wrapper around scales::label_number default big.mark = \".\" decimal.mark = \",\"","code":""},{"path":[]},{"path":"https://trekonom.github.io/countryscales/reference/label_number_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label numbers in decimal format (e.g. 0,12, 1.234) — label_number_de","text":"","code":"# ex-label_number_de.R set.seed(42) x <- 100 * runif(10) # Formatting numbers in decimal format number_de(x) #>  [1] \"91\" \"94\" \"29\" \"83\" \"64\" \"52\" \"74\" \"13\" \"66\" \"71\" number_de(x, accuracy = .1) #>  [1] \"91,5\" \"93,7\" \"28,6\" \"83,0\" \"64,2\" \"51,9\" \"73,7\" \"13,5\" \"65,7\" \"70,5\" # For use as labeller e.g. with ggplot2 library(ggplot2) ggplot(gapminder15, aes(gdp_per_cap, life_exp)) +   geom_point() +   scale_x_continuous(labels = label_number())   ggplot(gapminder15, aes(gdp_per_cap, life_exp)) +   geom_point() +   scale_x_continuous(labels = label_number_de())   ggplot(gapminder15, aes(gdp_per_cap, life_exp)) +   geom_point() +   scale_x_number()"},{"path":"https://trekonom.github.io/countryscales/reference/label_ordinal_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Label ordinal numbers (1., 2., 3., etc) — label_ordinal_de","title":"Label ordinal numbers (1., 2., 3., etc) — label_ordinal_de","text":"Round values integers display ordinal values.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label_ordinal_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label ordinal numbers (1., 2., 3., etc) — label_ordinal_de","text":"","code":"label_ordinal_de(   prefix = \"\",   suffix = \"\",   big.mark = \".\",   rules = ordinal_german(),   ... )  ordinal_german(gender = c(\"maskulin\", \"feminin\", \"neutral\"), digit = TRUE)"},{"path":"https://trekonom.github.io/countryscales/reference/label_ordinal_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label ordinal numbers (1., 2., 3., etc) — label_ordinal_de","text":"prefix, suffix Symbols display value. big.mark Character used every 3 digits separate thousands. rules Named list regular expressions, matched order. Name gives suffix, value specifies numbers match. ... arguments passed base::format(). gender maskulin feminin neutral gender German ordinal. digit German ordinal numbers displayed suffix \".\"","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label_ordinal_de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Label ordinal numbers (1., 2., 3., etc) — label_ordinal_de","text":"German wrapper around scales::label_ordinal default uses German rules convert numerics ordnial default big.mark = \".\".","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label_ordinal_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label ordinal numbers (1., 2., 3., etc) — label_ordinal_de","text":"","code":"require(scales) #> Loading required package: scales  demo_continuous(c(1, 5)) #> scale_x_continuous()  demo_continuous(c(1, 5), labels = label_ordinal_de()) #> scale_x_continuous(labels = label_ordinal_de()) #> Warning: 'big.mark' and 'decimal.mark' are both '.', which could be confusing   # Note that ordinal rounds values, so you may need to adjust the breaks too demo_continuous(c(1, 10)) #> scale_x_continuous()  demo_continuous(c(1, 10), labels = label_ordinal_de()) #> scale_x_continuous(labels = label_ordinal_de()) #> Warning: 'big.mark' and 'decimal.mark' are both '.', which could be confusing  demo_continuous(c(1, 10),   labels = label_ordinal_de(),   breaks = scales::breaks_width(2) ) #> scale_x_continuous(labels = label_ordinal_de(), breaks = scales::breaks_width(2)) #> Warning: 'big.mark' and 'decimal.mark' are both '.', which could be confusing"},{"path":"https://trekonom.github.io/countryscales/reference/label_percent_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Label percentages (e.g. 2,5%, 50%) — label_percent_de","title":"Label percentages (e.g. 2,5%, 50%) — label_percent_de","text":"Force display numbers percentages.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label_percent_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label percentages (e.g. 2,5%, 50%) — label_percent_de","text":"","code":"label_percent_de(   accuracy = 1,   scale = 100,   big.mark = \".\",   decimal.mark = \",\",   prefix = \"\",   suffix = \"%\",   trim = TRUE,   ... )  percent_de(   x,   accuracy = 1,   scale = 100,   big.mark = \".\",   decimal.mark = \",\",   prefix = \"\",   suffix = \"%\",   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/label_percent_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label percentages (e.g. 2,5%, 50%) — label_percent_de","text":"accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. prefix Additional text display number. suffix applied absolute value style_positive style_negative processed prefix = \"$\" yield (e.g.) -$1 ($1). suffix Additional text display number. trim Logical, FALSE, values right-justified common width (see base::format()). ... additional arguments passed label_percent, etc. x vector","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label_percent_de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Label percentages (e.g. 2,5%, 50%) — label_percent_de","text":"German wrapper around scales::label_percent default big.mark = \".\" decimal.mark = \",\"","code":""},{"path":[]},{"path":"https://trekonom.github.io/countryscales/reference/label_percent_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label percentages (e.g. 2,5%, 50%) — label_percent_de","text":"","code":"# ex-label_percent_de.R set.seed(42) x <- runif(10) # Formatting numbers as percentages percent_de(x) #>  [1] \"91%\" \"94%\" \"29%\" \"83%\" \"64%\" \"52%\" \"74%\" \"13%\" \"66%\" \"71%\" percent_de(x, accuracy = .1) #>  [1] \"91,5%\" \"93,7%\" \"28,6%\" \"83,0%\" \"64,2%\" \"51,9%\" \"73,7%\" \"13,5%\" \"65,7%\" #> [10] \"70,5%\" # For use as labeller e.g. with ggplot2 library(ggplot2) gapminder15$pct_pop <- gapminder15$pop / sum(gapminder15$pop) ggplot(gapminder15, aes(gdp_per_cap, pct_pop)) +   geom_point() +   scale_y_continuous(labels = label_percent_de())"},{"path":"https://trekonom.github.io/countryscales/reference/locales.html","id":null,"dir":"Reference","previous_headings":"","what":"Locales — locales","title":"Locales — locales","text":"dataset containing specification formatting styles label numbers currencies 320 countries.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/locales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locales — locales","text":"","code":"locales  locales2"},{"path":"https://trekonom.github.io/countryscales/reference/locales.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Locales — locales","text":"object class tbl_df (inherits tbl, data.frame) 311 rows 30 columns. object class tbl_df (inherits tbl, data.frame) 577 rows 45 columns.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/locales.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Locales — locales","text":"https://lh.2xlibre.net","code":""},{"path":"https://trekonom.github.io/countryscales/reference/number_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Scale Constructor — number_scale","title":"Formatted Scale Constructor — number_scale","text":"scale_xxx_xxx_de family functions makes easy style (numeric) axes using standard number formatting used Germany.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/number_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Scale Constructor — number_scale","text":"","code":"number_scale(   aesthetics,   scale_name,   palette,   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = c(0.01, 0),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   super = ScaleContinuous,   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = \" \",   decimal.mark = \".\",   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/number_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted Scale Constructor — number_scale","text":"aesthetics names aesthetics scale works . scale_name name scale used error messages associated scale. palette palette function called numeric vector values 0 1 returns corresponding output values (e.g., scales::area_pal()). name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. breaks One : NULL breaks waiver() default breaks computed transformation object numeric vector positions function takes limits input returns breaks output (e.g., function returned scales::extended_breaks()). Also accepts rlang lambda function notation. minor_breaks One : NULL minor breaks waiver() default breaks (one minor break major break) numeric vector positions function given limits returns vector minor breaks. Also accepts rlang lambda function notation. guide function used create guide name. See guides() information. n.breaks integer guiding number major breaks. algorithm may choose slightly different number ensure nice break labels. effect breaks = waiver(). Use NULL use default number breaks given transformation. labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) expression vector (must length breaks). See ?plotmath details. function takes breaks input returns labels output. Also accepts rlang lambda function notation. limits One : NULL use default scale range numeric vector length two providing limits scale. Use NA refer existing minimum maximum function accepts existing (automatic) limits returns new limits. Also accepts rlang lambda function notation. Note setting limits positional scales remove data outside limits. purpose zoom, use limit argument coordinate system (see coord_cartesian()). expand position scales, vector range expansion constants used add padding around data ensure placed distance away axes. Use convenience function expansion() generate values expand argument. defaults expand scale 5% side continuous variables, 0.6 units side discrete variables. oob One : Function handles limits outside scale limits (bounds). Also accepts rlang lambda function notation. default (scales::censor()) replaces bounds values NA. scales::squish() squishing bounds values range. scales::squish_infinite() squishing infinite values range. na.value Missing values replaced value. trans continuous scales, name transformation object object . Built-transformations include \"asn\", \"atanh\", \"boxcox\", \"date\", \"exp\", \"hms\", \"identity\", \"log\", \"log10\", \"log1p\", \"log2\", \"logit\", \"modulus\", \"probability\", \"probit\", \"pseudo_log\", \"reciprocal\", \"reverse\", \"sqrt\" \"time\". transformation object bundles together transform, inverse, methods generating breaks labels. Transformation objects defined scales package, called <name>_trans (e.g., scales::boxcox_trans()). can create transformation scales::trans_new(). position position scales, position axis. left right y axes, top bottom x axes. super super class use constructed scale accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Symbol display value. suffix Symbol display value. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed base::format().","code":""},{"path":"https://trekonom.github.io/countryscales/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. scales demo_continuous, label_dollar, label_number, label_percent","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-ch.html","id":null,"dir":"Reference","previous_headings":"","what":"Swiss Style Positional Scales — scale-ch","title":"Swiss Style Positional Scales — scale-ch","text":"scale_xxx_xxx family functions makes easy format axis text decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-ch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swiss Style Positional Scales — scale-ch","text":"","code":"scale_x_number_ch(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_y_number_ch(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_x_percent_ch(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_y_percent_ch(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/scale-ch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swiss Style Positional Scales — scale-ch","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. breaks One : NULL breaks waiver() default breaks computed transformation object numeric vector positions function takes limits input returns breaks output (e.g., function returned scales::extended_breaks()). Also accepts rlang lambda function notation. minor_breaks One : NULL minor breaks waiver() default breaks (one minor break major break) numeric vector positions function given limits returns vector minor breaks. Also accepts rlang lambda function notation. guide function used create guide name. See guides() information. n.breaks integer guiding number major breaks. algorithm may choose slightly different number ensure nice break labels. effect breaks = waiver(). Use NULL use default number breaks given transformation. labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) expression vector (must length breaks). See ?plotmath details. function takes breaks input returns labels output. Also accepts rlang lambda function notation. limits One : NULL use default scale range numeric vector length two providing limits scale. Use NA refer existing minimum maximum function accepts existing (automatic) limits returns new limits. Also accepts rlang lambda function notation. Note setting limits positional scales remove data outside limits. purpose zoom, use limit argument coordinate system (see coord_cartesian()). expand position scales, vector range expansion constants used add padding around data ensure placed distance away axes. Use convenience function expansion() generate values expand argument. defaults expand scale 5% side continuous variables, 0.6 units side discrete variables. oob One : Function handles limits outside scale limits (bounds). Also accepts rlang lambda function notation. default (scales::censor()) replaces bounds values NA. scales::squish() squishing bounds values range. scales::squish_infinite() squishing infinite values range. na.value Missing values replaced value. trans continuous scales, name transformation object object . Built-transformations include \"asn\", \"atanh\", \"boxcox\", \"date\", \"exp\", \"hms\", \"identity\", \"log\", \"log10\", \"log1p\", \"log2\", \"logit\", \"modulus\", \"probability\", \"probit\", \"pseudo_log\", \"reciprocal\", \"reverse\", \"sqrt\" \"time\". transformation object bundles together transform, inverse, methods generating breaks labels. Transformation objects defined scales package, called <name>_trans (e.g., scales::boxcox_trans()). can create transformation scales::trans_new(). position position scales, position axis. left right y axes, top bottom x axes. sec.axis sec_axis() used specify secondary axis. accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Symbol display value. suffix Symbol display value. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed scale_(x|y)_continuous()","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-ch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Swiss Style Positional Scales — scale-ch","text":"_number ones format axis text numbers. _percent ones format axis text percentages. _dollar ones format axis text dollars. _euro ones format axis text euros.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-ch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Swiss Style Positional Scales — scale-ch","text":"","code":"demo_number(c(-1e6, 1e6), scale_name = \"number_ch\") #> scale_x_number_ch()  # scale_x_number_ch() demo_number(c(-1e6, 1e6), scale_name = \"percent_ch\") #> scale_x_percent_ch()  # scale_x_percent_ch() #demo_number(c(-1e6, 1e6), scale_name = \"dollar_ch\") # scale_x_dollar_ch()"},{"path":"https://trekonom.github.io/countryscales/reference/scale-de.html","id":null,"dir":"Reference","previous_headings":"","what":"German Style Positional Scales — scale-de","title":"German Style Positional Scales — scale-de","text":"scale_xxx_xxx family functions makes easy format axis text decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"German Style Positional Scales — scale-de","text":"","code":"scale_x_number_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_y_number_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_x_percent_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_y_percent_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/scale-de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"German Style Positional Scales — scale-de","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. breaks One : NULL breaks waiver() default breaks computed transformation object numeric vector positions function takes limits input returns breaks output (e.g., function returned scales::extended_breaks()). Also accepts rlang lambda function notation. minor_breaks One : NULL minor breaks waiver() default breaks (one minor break major break) numeric vector positions function given limits returns vector minor breaks. Also accepts rlang lambda function notation. guide function used create guide name. See guides() information. n.breaks integer guiding number major breaks. algorithm may choose slightly different number ensure nice break labels. effect breaks = waiver(). Use NULL use default number breaks given transformation. labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) expression vector (must length breaks). See ?plotmath details. function takes breaks input returns labels output. Also accepts rlang lambda function notation. limits One : NULL use default scale range numeric vector length two providing limits scale. Use NA refer existing minimum maximum function accepts existing (automatic) limits returns new limits. Also accepts rlang lambda function notation. Note setting limits positional scales remove data outside limits. purpose zoom, use limit argument coordinate system (see coord_cartesian()). expand position scales, vector range expansion constants used add padding around data ensure placed distance away axes. Use convenience function expansion() generate values expand argument. defaults expand scale 5% side continuous variables, 0.6 units side discrete variables. oob One : Function handles limits outside scale limits (bounds). Also accepts rlang lambda function notation. default (scales::censor()) replaces bounds values NA. scales::squish() squishing bounds values range. scales::squish_infinite() squishing infinite values range. na.value Missing values replaced value. trans continuous scales, name transformation object object . Built-transformations include \"asn\", \"atanh\", \"boxcox\", \"date\", \"exp\", \"hms\", \"identity\", \"log\", \"log10\", \"log1p\", \"log2\", \"logit\", \"modulus\", \"probability\", \"probit\", \"pseudo_log\", \"reciprocal\", \"reverse\", \"sqrt\" \"time\". transformation object bundles together transform, inverse, methods generating breaks labels. Transformation objects defined scales package, called <name>_trans (e.g., scales::boxcox_trans()). can create transformation scales::trans_new(). position position scales, position axis. left right y axes, top bottom x axes. sec.axis sec_axis() used specify secondary axis. accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Symbol display value. suffix Symbol display value. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed scale_(x|y)_continuous()","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"German Style Positional Scales — scale-de","text":"_number ones format axis text numbers. _percent ones format axis text percentages. _dollar ones format axis text dollars. _euro ones format axis text euros.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"German Style Positional Scales — scale-de","text":"","code":"demo_number(c(-1e6, 1e6), scale_name = \"number_de\") #> scale_x_number_de()  # scale_x_number_de() demo_number(c(-1e6, 1e6), scale_name = \"percent_de\") #> scale_x_percent_de()  # scale_x_percent_de() #demo_number(c(-1e6, 1e6), scale_name = \"dollar_de\") # scale_x_dollar_de()"},{"path":"https://trekonom.github.io/countryscales/reference/scale-format.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Positional Scales — scale-format","title":"Formatted Positional Scales — scale-format","text":"scale_xxx_xxx family functions makes easy format axis text decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Positional Scales — scale-format","text":"","code":"scale_x_number_locale(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   locale = \"en-US\",   trim = TRUE,   ... )  scale_y_number_locale(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   locale = \"en-US\",   trim = TRUE,   ... )  scale_x_percent_locale(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   locale = \"en-US\",   trim = TRUE,   ... )  scale_y_percent_locale(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   locale = \"en-US\",   trim = TRUE,   ... )  scale_x_comma_locale(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = \",\",   decimal.mark = \".\",   trim = TRUE,   ... )  scale_y_comma_locale(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = \",\",   decimal.mark = \".\",   trim = TRUE,   ... )  scale_x_dollar_locale(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"$\",   suffix = \"\",   big.mark = \" \",   decimal.mark = \".\",   trim = TRUE,   ... )  scale_y_dollar_locale(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"$\",   suffix = \"\",   big.mark = \" \",   decimal.mark = \".\",   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/scale-format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted Positional Scales — scale-format","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. breaks One : NULL breaks waiver() default breaks computed transformation object numeric vector positions function takes limits input returns breaks output (e.g., function returned scales::extended_breaks()). Also accepts rlang lambda function notation. minor_breaks One : NULL minor breaks waiver() default breaks (one minor break major break) numeric vector positions function given limits returns vector minor breaks. Also accepts rlang lambda function notation. guide function used create guide name. See guides() information. n.breaks integer guiding number major breaks. algorithm may choose slightly different number ensure nice break labels. effect breaks = waiver(). Use NULL use default number breaks given transformation. labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) expression vector (must length breaks). See ?plotmath details. function takes breaks input returns labels output. Also accepts rlang lambda function notation. limits One : NULL use default scale range numeric vector length two providing limits scale. Use NA refer existing minimum maximum function accepts existing (automatic) limits returns new limits. Also accepts rlang lambda function notation. Note setting limits positional scales remove data outside limits. purpose zoom, use limit argument coordinate system (see coord_cartesian()). expand position scales, vector range expansion constants used add padding around data ensure placed distance away axes. Use convenience function expansion() generate values expand argument. defaults expand scale 5% side continuous variables, 0.6 units side discrete variables. oob One : Function handles limits outside scale limits (bounds). Also accepts rlang lambda function notation. default (scales::censor()) replaces bounds values NA. scales::squish() squishing bounds values range. scales::squish_infinite() squishing infinite values range. na.value Missing values replaced value. trans continuous scales, name transformation object object . Built-transformations include \"asn\", \"atanh\", \"boxcox\", \"date\", \"exp\", \"hms\", \"identity\", \"log\", \"log10\", \"log1p\", \"log2\", \"logit\", \"modulus\", \"probability\", \"probit\", \"pseudo_log\", \"reciprocal\", \"reverse\", \"sqrt\" \"time\". transformation object bundles together transform, inverse, methods generating breaks labels. Transformation objects defined scales package, called <name>_trans (e.g., scales::boxcox_trans()). can create transformation scales::trans_new(). position position scales, position axis. left right y axes, top bottom x axes. sec.axis sec_axis() used specify secondary axis. accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Symbol display value. suffix Symbol display value. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. locale locale string. Defaults \"en-US\" trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed scale_(x|y)_continuous()","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Formatted Positional Scales — scale-format","text":"number ones format axis text numbers. percent ones format axis text percentages. dollar ones format axis text dollars. euro ones format axis text euros.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale_x_number.html","id":null,"dir":"Reference","previous_headings":"","what":"German Style Positional Scales — scale_x_dollar","title":"German Style Positional Scales — scale_x_dollar","text":"scale_xxx_xxx_de family functions makes easy style (numeric) axes using standard number formatting used Germany.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale_x_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"German Style Positional Scales — scale_x_dollar","text":"","code":"scale_x_dollar(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels,   limits = NULL,   expand = c(0.01, 0),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"$\",   suffix = \"\",   big.mark = \" \",   decimal.mark = \".\",   trim = TRUE,   ... )  scale_y_dollar(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels,   limits = NULL,   expand = c(0.01, 0),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"$\",   suffix = \"\",   big.mark = \" \",   decimal.mark = \".\",   trim = TRUE,   ... )  scale_x_dollar_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels,   limits = NULL,   expand = c(0.01, 0),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"$\",   suffix = \"\",   big.mark = \".\",   decimal.mark = \",\",   trim = TRUE,   ... )  scale_y_dollar_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels,   limits = NULL,   expand = c(0.01, 0),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"$\",   suffix = \"\",   big.mark = \".\",   decimal.mark = \",\",   trim = TRUE,   ... )  scale_x_euro_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels,   limits = NULL,   expand = c(0.01, 0),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"€\",   big.mark = \".\",   decimal.mark = \",\",   trim = TRUE,   ... )  scale_y_euro_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels,   limits = NULL,   expand = c(0.01, 0),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"€\",   big.mark = \".\",   decimal.mark = \",\",   trim = TRUE,   ... )  scale_x_number(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels,   limits = NULL,   expand = c(0.01, 0),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = \" \",   decimal.mark = \".\",   trim = TRUE,   ... )  scale_y_number(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels,   limits = NULL,   expand = c(0.01, 0),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = \" \",   decimal.mark = \".\",   trim = TRUE,   ... )  scale_x_number_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels,   limits = NULL,   expand = c(0.01, 0),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = \".\",   decimal.mark = \",\",   trim = TRUE,   ... )  scale_y_number_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels,   limits = NULL,   expand = c(0.01, 0),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = \".\",   decimal.mark = \",\",   trim = TRUE,   ... )  scale_x_percent_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels,   limits = NULL,   expand = c(0.01, 0),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = \"%\",   big.mark = \".\",   decimal.mark = \",\",   trim = TRUE,   ... )  scale_y_percent_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels,   limits = NULL,   expand = c(0.01, 0),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = \"%\",   big.mark = \".\",   decimal.mark = \",\",   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/scale_x_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"German Style Positional Scales — scale_x_dollar","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. breaks One : NULL breaks waiver() default breaks computed transformation object numeric vector positions function takes limits input returns breaks output (e.g., function returned scales::extended_breaks()). Also accepts rlang lambda function notation. minor_breaks One : NULL minor breaks waiver() default breaks (one minor break major break) numeric vector positions function given limits returns vector minor breaks. Also accepts rlang lambda function notation. guide function used create guide name. See guides() information. n.breaks integer guiding number major breaks. algorithm may choose slightly different number ensure nice break labels. effect breaks = waiver(). Use NULL use default number breaks given transformation. labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) function takes breaks input returns labels output. Also accepts rlang lambda function notation. limits One : NULL use default scale range numeric vector length two providing limits scale. Use NA refer existing minimum maximum function accepts existing (automatic) limits returns new limits. Also accepts rlang lambda function notation. Note setting limits positional scales remove data outside limits. purpose zoom, use limit argument coordinate system (see coord_cartesian()). expand position scales, vector range expansion constants used add padding around data ensure placed distance away axes. Use convenience function expansion() generate values expand argument. defaults expand scale 5% side continuous variables, 0.6 units side discrete variables. oob One : Function handles limits outside scale limits (bounds). Also accepts rlang lambda function notation. default (scales::censor()) replaces bounds values NA. scales::squish() squishing bounds values range. scales::squish_infinite() squishing infinite values range. na.value Missing values replaced value. trans continuous scales, name transformation object object . Built-transformations include \"asn\", \"atanh\", \"boxcox\", \"date\", \"exp\", \"hms\", \"identity\", \"log\", \"log10\", \"log1p\", \"log2\", \"logit\", \"modulus\", \"probability\", \"probit\", \"pseudo_log\", \"reciprocal\", \"reverse\", \"sqrt\" \"time\". transformation object bundles together transform, inverse, methods generating breaks labels. Transformation objects defined scales package, called <name>_trans (e.g., scales::boxcox_trans()). can create transformation scales::trans_new(). position position scales, position axis. left right y axes, top bottom x axes. sec.axis sec_axis() used specify secondary axis. accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formating. useful underlying data small large. prefix Symbol display value. suffix Symbol display value. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed scale_(x|y)_continuous()","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale_x_number.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"German Style Positional Scales — scale_x_dollar","text":"_number ones format axis text numbers. _percent ones format axis text percentages. _dollar ones format axis text dollars. _euro ones format axis text euros.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/show_locales.html","id":null,"dir":"Reference","previous_headings":"","what":"Locales — show_locales","title":"Locales — show_locales","text":"convenience function returns dataframe available locales countries.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/show_locales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locales — show_locales","text":"","code":"show_locales()"},{"path":"https://trekonom.github.io/countryscales/reference/show_locales.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locales — show_locales","text":"dataframe","code":""},{"path":"https://trekonom.github.io/countryscales/reference/show_locales.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locales — show_locales","text":"","code":"show_locales() #> # A tibble: 311 × 2 #>    locale cntry                #>    <chr>  <chr>                #>  1 aa-DJ  Djibouti             #>  2 aa-ER  Eritrea              #>  3 aa-ET  Ethiopia             #>  4 af-ZA  South Africa         #>  5 ak-GH  Ghana                #>  6 am-ET  Ethiopia             #>  7 an-ES  Spain                #>  8 anp-IN India                #>  9 ar-AE  United Arab Emirates #> 10 ar-BH  Bahrain              #> # ℹ 301 more rows"}]

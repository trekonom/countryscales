[{"path":"https://trekonom.github.io/countryscales/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 countryscales authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://trekonom.github.io/countryscales/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Moog. Author, maintainer. scales authors. Author.           Authors included code scales package Posit, PBC. Copyright holder.           Copyright holder included code scales package","code":""},{"path":"https://trekonom.github.io/countryscales/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Moog S, scales authors (2024). countryscales: Country Scales. R package version 0.1.9.9000, https://trekonom.github.io/countryscales/, https://github.com/trekonom/countryscales.","code":"@Manual{,   title = {countryscales: Country Scales},   author = {Stefan Moog and {scales authors}},   year = {2024},   note = {R package version 0.1.9.9000,     https://trekonom.github.io/countryscales/},   url = {https://github.com/trekonom/countryscales}, }"},{"path":"https://trekonom.github.io/countryscales/index.html","id":"countryscales","dir":"","previous_headings":"","what":"Country Scales","title":"Country Scales","text":"countryscales extends scales ggplot2 providing functions make easy display numbers label axis text positional scales decimal format, percentages currencies using country- locale-specific style conventions.","code":""},{"path":"https://trekonom.github.io/countryscales/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Country Scales","text":"can install development version countryscales GitHub using:","code":"remotes::install_github(\"trekonom/countryscales\")"},{"path":"https://trekonom.github.io/countryscales/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Country Scales","text":"common use case countryscales customize appearance axis legend labels format numbers added labels plot using country-specific style conventions. ’s example showing 1 million USD formatted according style conventions G20 countries:  another example, let’s look formatting chart according German style conventions, dot (.) used big mark. countryscales package can use scale_x/y_xxx_locale label_xxx_locale functions add labels format axis base plot according German style conventions like :  countryscales also handy functions common locales. instance, can use label_number_ch scale_x_number_ch format plot using Swiss style conventions:","code":"library(countryscales) library(ggplot2) library(dplyr, warn.conflicts = FALSE)  g20 <- countryscales::g20 |>   # India is not supported   filter(iso2c != \"IN\") |>   mutate(     x = factor(rep(1:2, 9)),     y = factor(rep(9:1, each = 2)),     country = if_else(iso2c %in% c(\"US\", \"GB\"), paste(\"the\", country), country),     locale = if_else(iso2c == \"CN\", \"zh-Hans-CN\", locale),     value = purrr::map_chr(       locale,       ~ label_currency_locale(locale = .x, currency = \"USD\")(1e6)     )   )  ggplot(g20, aes(x = x, y = y)) +   geom_label(     aes(label = paste(value, \"in\", country), fill = country),     label.padding = unit(5, \"pt\"), label.r = unit(8, \"pt\"),     color = \"white\"   ) +   theme_void() +   labs(     title = \"1 million USD are formatted as\"   ) +   guides(fill = \"none\") base <- gapminder15 |>   count(region, wt = pop) |>   ggplot(     aes(n, reorder(region, n),       fill = region     )   ) +   scale_fill_brewer(palette = \"Dark2\") +   geom_col(width = .6) +   theme_minimal() +   labs(     x = NULL, y = NULL,     title = \"Default\"   ) +   guides(fill = \"none\") base +   geom_label(     aes(       label = label_number_locale(         locale = \"de-DE\", accuracy = 1000       )(n)     ),     hjust = 1, fill = NA,     label.size = NA, color = \"white\"   ) +   scale_x_number_locale(     locale = \"de-DE\",     expand = expansion(mult = c(0, .05))   ) +   labs(title = \"German style conventions.\") base +   geom_label(     aes(       label = label_number_ch(accuracy = 1000)(n)     ),     hjust = 1, fill = NA,     label.size = NA, color = \"white\"   ) +   scale_x_number_ch(     expand = expansion(mult = c(0, .05))   ) +   labs(title = \"Swiss style conventions.\")"},{"path":"https://trekonom.github.io/countryscales/index.html","id":"note-on-supported-locales","dir":"","previous_headings":"","what":"Note on supported locales","title":"Country Scales","text":"countryscales uses data locale-specific numbering formats Common Locale Data Repository (CLDR) provided easy use R i18n package. Right now countryscales supports 552 574 locales listed i18n. supported locales deviate international norm grouping digits threes. includes locales using Indian numbering system groups rightmost three digits together (hundreds place), thereafter groups sets two digits.","code":""},{"path":"https://trekonom.github.io/countryscales/index.html","id":"note-on-tests","dir":"","previous_headings":"","what":"Note on tests","title":"Country Scales","text":"label_xxx_locale family functions tested output Intl.NumberFormat ensure correctness supported locale. example, test label_currency_locale correctly formats numbers currencies German locale, output checked output JS code","code":"const number = 123456;  console.log(   new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'USD' }).format(     number,   ), );"},{"path":"https://trekonom.github.io/countryscales/index.html","id":"credits","dir":"","previous_headings":"","what":"Credits","title":"Country Scales","text":"countryscales possible without work people: Thanks people contributed Common Locale Data Repository provide data support world’s languages software. Thanks Rich Ianonne providing CLDR data easy use R via i18n package. Additionally, design hex logo countryscales package heavily inspired i18n hex logo. Thanks Bob Rudis, similar spirit started provides convenience functions scale_x/y_percent/number/dollar ggplo2 via hrbrthemes package, served blueprints scale_x/y_percent/number/currency_locale family functions. Last least thanks authors scales package people Posit. started countryscales thought simply provide wrappers around function already provided scales. quickly realised localization complex world . First, comes formatting currencies, e.g. correct positioning currency symbol minus sign, realised cases can’t dealt using scales::label_number scales::label_currency. Hence, hood countryscales uses modified version label_number format numbers currencies. Second, learend minus signs, percent signs, … include Unicode control characters several locales bidirectional text control. Unfortunatly, scales::label_number allow pass custom symbols minus plus symbols. Hence, hood countryscales uses modified version label_number (mainly) account Unicode control characters.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Countries — countries","title":"Countries — countries","text":"data.frame country names, language codes, country codes locales","code":""},{"path":"https://trekonom.github.io/countryscales/reference/countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Countries — countries","text":"","code":"countries"},{"path":"https://trekonom.github.io/countryscales/reference/countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Countries — countries","text":"object class tbl_df (inherits tbl, data.frame) 377 rows 4 columns.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/countries.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Countries — countries","text":"https://cdn.simplelocalize.io/public/v1/locales","code":""},{"path":"https://trekonom.github.io/countryscales/reference/countryscales-package.html","id":null,"dir":"Reference","previous_headings":"","what":"countryscales: Country Scales — countryscales-package","title":"countryscales: Country Scales — countryscales-package","text":"Make easy display numbers using country style conventions.","code":""},{"path":[]},{"path":"https://trekonom.github.io/countryscales/reference/countryscales-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"countryscales: Country Scales — countryscales-package","text":"Maintainer: Stefan Moog moogs@gmx.de Authors: scales authors (Authors included code scales package) contributors: Posit, PBC (Copyright holder included code scales package) [copyright holder]","code":""},{"path":"https://trekonom.github.io/countryscales/reference/currencies.html","id":null,"dir":"Reference","previous_headings":"","what":"A table with localized currency attributes and descriptors — currencies","title":"A table with localized currency attributes and descriptors — currencies","text":"Re-Imported i18n silent R CMD check errors.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/currencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A table with localized currency attributes and descriptors — currencies","text":"","code":"currencies"},{"path":"https://trekonom.github.io/countryscales/reference/currencies.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A table with localized currency attributes and descriptors — currencies","text":"object class tbl_df (inherits tbl, data.frame) 175070 rows 7 columns.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/currencies.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A table with localized currency attributes and descriptors — currencies","text":"https://rich-iannone.github.io/i18n/","code":""},{"path":"https://trekonom.github.io/countryscales/reference/demo_number.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplo2 demo — demo_number","title":"ggplo2 demo — demo_number","text":"ggplo2 demo","code":""},{"path":"https://trekonom.github.io/countryscales/reference/demo_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplo2 demo — demo_number","text":"","code":"demo_number(x, scale_name, ...)"},{"path":"https://trekonom.github.io/countryscales/reference/demo_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplo2 demo — demo_number","text":"x numeric scale_name scale name ... arguments passed scale","code":""},{"path":"https://trekonom.github.io/countryscales/reference/demo_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplo2 demo — demo_number","text":"","code":"demo_number(c(32, 212), scale_name = \"number_locale\") #> scale_x_number_locale()"},{"path":"https://trekonom.github.io/countryscales/reference/g20.html","id":null,"dir":"Reference","previous_headings":"","what":"G20 countries — g20","title":"G20 countries — g20","text":"data.frame names, codes locales G20 countries","code":""},{"path":"https://trekonom.github.io/countryscales/reference/g20.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"G20 countries — g20","text":"","code":"g20"},{"path":"https://trekonom.github.io/countryscales/reference/g20.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"G20 countries — g20","text":"object class tbl_df (inherits tbl, data.frame) 19 rows 5 columns.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/g20.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"G20 countries — g20","text":"https://en.wikipedia.org/wiki/G20, https://cdn.simplelocalize.io/public/v1/locales","code":""},{"path":"https://trekonom.github.io/countryscales/reference/gapminder.html","id":null,"dir":"Reference","previous_headings":"","what":"Gapminder Dataset — gapminder","title":"Gapminder Dataset — gapminder","text":"dataset containing data GDP per capita, life expectancy population size 183 countries 1800 2015","code":""},{"path":"https://trekonom.github.io/countryscales/reference/gapminder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gapminder Dataset — gapminder","text":"","code":"gapminder  gapminder15"},{"path":"https://trekonom.github.io/countryscales/reference/gapminder.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gapminder Dataset — gapminder","text":"data frame 14,823 rows 7 variables: country country name code country code region world region year year life_exp life expectancy birth, years gdp_per_cap GDP per capita, dollars PPP pop population size, persons object class tbl_df (inherits tbl, data.frame) 183 rows 7 columns.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/gapminder.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Gapminder Dataset — gapminder","text":"http://www.gapminder.org/","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-ch.html","id":null,"dir":"Reference","previous_headings":"","what":"Swiss Style Formatting of Numbers — label-ch","title":"Swiss Style Formatting of Numbers — label-ch","text":"label_xxx_xxx family functions makes easy format numbers decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-ch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swiss Style Formatting of Numbers — label-ch","text":"","code":"label_number_ch(   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  number_ch(   x,   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  label_percent_ch(   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  percent_ch(   x,   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  label_currency_ch(   accuracy = 1,   scale = 1,   currency = \"CHF\",   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  currency_ch(   x,   accuracy = 1,   scale = 1,   currency = \"CHF\",   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/label-ch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swiss Style Formatting of Numbers — label-ch","text":"accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Additional text display number. suffix applied absolute value style_positive style_negative processed prefix = \"$\" yield (e.g.) -$1 ($1). suffix Additional text display number. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed base::format(). x numeric currency currency symbol","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-ch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Swiss Style Formatting of Numbers — label-ch","text":"label_number_ch formats numbers decimal format. label_percent_ch formats numbers percentages. label_currency_ch formats numbers currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-ch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Swiss Style Formatting of Numbers — label-ch","text":"","code":"require(scales) #> Loading required package: scales  demo_continuous(c(-1e6, 1e6),   labels = label_number_ch() ) #> scale_x_continuous(labels = label_number_ch())  demo_continuous(c(-1, 1),   labels = label_percent_ch(accuracy = .01) ) #> scale_x_continuous(labels = label_percent_ch(accuracy = 0.01))  demo_continuous(c(-1, 1),   labels = label_currency_ch(accuracy = .1) ) #> scale_x_continuous(labels = label_currency_ch(accuracy = 0.1))"},{"path":"https://trekonom.github.io/countryscales/reference/label-de.html","id":null,"dir":"Reference","previous_headings":"","what":"German Style Formatting of Numbers — label-de","title":"German Style Formatting of Numbers — label-de","text":"label_xxx_xxx family functions makes easy format numbers decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"German Style Formatting of Numbers — label-de","text":"","code":"label_number_de(   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  number_de(   x,   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  label_percent_de(   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  percent_de(   x,   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  label_currency_de(   accuracy = 1,   scale = 1,   currency = \"EUR\",   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  currency_de(   x,   accuracy = 1,   scale = 1,   currency = \"EUR\",   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/label-de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"German Style Formatting of Numbers — label-de","text":"accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Additional text display number. suffix applied absolute value style_positive style_negative processed prefix = \"$\" yield (e.g.) -$1 ($1). suffix Additional text display number. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed base::format(). x numeric currency currency symbol","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"German Style Formatting of Numbers — label-de","text":"label_number_de formats numbers decimal format. label_percent_de formats numbers percentages. label_currency_de formats numbers currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"German Style Formatting of Numbers — label-de","text":"","code":"if (FALSE) { # \\dontrun{ require(scales) demo_continuous(   c(-1e6, 1e6),   labels = label_number_de() ) demo_continuous(   c(-1, 1),   labels = label_percent_de(accuracy = .01) ) demo_continuous(   c(-1, 1),   labels = label_currency_de(accuracy = .1) ) } # }"},{"path":"https://trekonom.github.io/countryscales/reference/label-locale.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting numbers — label-locale","title":"Formatting numbers — label-locale","text":"label_xxx_locale family functions makes easy format numbers decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-locale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting numbers — label-locale","text":"","code":"label_number_locale(   accuracy = NULL,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   locale = \"en-US\",   trim = TRUE,   ... )  label_percent_locale(   accuracy = NULL,   scale = 100,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   locale = \"en-US\",   trim = TRUE,   ... )  label_currency_locale(   accuracy = NULL,   scale = 1,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   p_sep_by = NULL,   n_sep_by = NULL,   currency = \"USD\",   locale = \"en-US\",   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/label-locale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting numbers — label-locale","text":"accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Additional text display number. suffix applied absolute value style_positive style_negative processed prefix = \"$\" yield (e.g.) -$1 ($1). suffix Additional text display number. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. locale locale string. Defaults \"en-US\" trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed base::format(). p_sep_by separator currency symbol positive monteary value n_sep_by separator currency symbol negative monteary value currency currency symbol","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-locale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Formatting numbers — label-locale","text":"label_number_locale formats numbers decimal format. label_percent_locale formats numbers percentages. label_currency_locale formats numbers currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-locale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting numbers — label-locale","text":"","code":"if (FALSE) { # \\dontrun{ require(scales) demo_continuous(   c(-1e6, 1e6),   labels = label_number_locale(locale = \"fr-FR\") ) demo_continuous(   c(-1, 1),   label_percent_locale(locale = \"it-IT\", accuracy = .01) ) demo_continuous(   c(-1, 1),   labels = label_currency_locale(     locale = \"ja-JP\", accuracy = .1,     currency = \"JPY\"   ) ) } # }"},{"path":"https://trekonom.github.io/countryscales/reference/label-us.html","id":null,"dir":"Reference","previous_headings":"","what":"US Style Formatting of Numbers — label-us","title":"US Style Formatting of Numbers — label-us","text":"label_xxx_xxx family functions makes easy format numbers decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-us.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US Style Formatting of Numbers — label-us","text":"","code":"label_number_us(   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  number_us(   x,   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  label_percent_us(   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  percent_us(   x,   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  label_currency_us(   accuracy = 1,   scale = 1,   currency = \"USD\",   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  currency_us(   x,   accuracy = 1,   scale = 1,   currency = \"USD\",   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/label-us.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"US Style Formatting of Numbers — label-us","text":"accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Additional text display number. suffix applied absolute value style_positive style_negative processed prefix = \"$\" yield (e.g.) -$1 ($1). suffix Additional text display number. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed base::format(). x numeric currency currency symbol","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-us.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"US Style Formatting of Numbers — label-us","text":"label_number_us formats numbers decimal format. label_percent_us formats numbers percentages. label_currency_us formats numbers currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/label-us.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"US Style Formatting of Numbers — label-us","text":"","code":"require(scales)  demo_continuous(c(-1e6, 1e6),   labels = label_number_us() ) #> scale_x_continuous(labels = label_number_us())  demo_continuous(c(-1, 1),   labels = label_percent_us(accuracy = .1) ) #> scale_x_continuous(labels = label_percent_us(accuracy = 0.1))  demo_continuous(c(-1, 1),   labels = label_currency_us(accuracy = .1) ) #> scale_x_continuous(labels = label_currency_us(accuracy = 0.1))"},{"path":"https://trekonom.github.io/countryscales/reference/locales.html","id":null,"dir":"Reference","previous_headings":"","what":"Locales — locales","title":"Locales — locales","text":"dataset containing specification formatting styles label numbers, percentages currencies 574 locales based CLDR (Common Locale Data Repository) data provided i18n package.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/locales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locales — locales","text":"","code":"locales"},{"path":"https://trekonom.github.io/countryscales/reference/locales.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Locales — locales","text":"object class tbl_df (inherits tbl, data.frame) 764 rows 46 columns.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/locales.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Locales — locales","text":"https://rich-iannone.github.io/i18n/","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-ch.html","id":null,"dir":"Reference","previous_headings":"","what":"Swiss Style Positional Scales — scale-ch","title":"Swiss Style Positional Scales — scale-ch","text":"scale_xxx_xxx family functions makes easy format axis text decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-ch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swiss Style Positional Scales — scale-ch","text":"","code":"scale_x_number_ch(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_y_number_ch(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_x_percent_ch(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_y_percent_ch(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_x_currency_ch(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   currency = \"CHF\",   trim = TRUE,   ... )  scale_y_currency_ch(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   currency = \"CHF\",   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/scale-ch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swiss Style Positional Scales — scale-ch","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. breaks One : NULL breaks waiver() default breaks computed transformation object numeric vector positions function takes limits input returns breaks output (e.g., function returned scales::extended_breaks()). Note position scales, limits provided scale expansion. Also accepts rlang lambda function notation. minor_breaks One : NULL minor breaks waiver() default breaks (one minor break major break) numeric vector positions function given limits returns vector minor breaks. Also accepts rlang lambda function notation. function two arguments, given limits major breaks. guide function used create guide name. See guides() information. n.breaks integer guiding number major breaks. algorithm may choose slightly different number ensure nice break labels. effect breaks = waiver(). Use NULL use default number breaks given transformation. labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) expression vector (must length breaks). See ?plotmath details. function takes breaks input returns labels output. Also accepts rlang lambda function notation. limits One : NULL use default scale range numeric vector length two providing limits scale. Use NA refer existing minimum maximum function accepts existing (automatic) limits returns new limits. Also accepts rlang lambda function notation. Note setting limits positional scales remove data outside limits. purpose zoom, use limit argument coordinate system (see coord_cartesian()). expand position scales, vector range expansion constants used add padding around data ensure placed distance away axes. Use convenience function expansion() generate values expand argument. defaults expand scale 5% side continuous variables, 0.6 units side discrete variables. oob One : Function handles limits outside scale limits (bounds). Also accepts rlang lambda function notation. default (scales::censor()) replaces bounds values NA. scales::squish() squishing bounds values range. scales::squish_infinite() squishing infinite values range. na.value Missing values replaced value. trans Deprecated favour transform. position position scales, position axis. left right y axes, top bottom x axes. sec.axis sec_axis() used specify secondary axis. accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Additional text display number. suffix applied absolute value style_positive style_negative processed prefix = \"$\" yield (e.g.) -$1 ($1). suffix Additional text display number. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed scale_(x|y)_continuous() currency currency symbol","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-ch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Swiss Style Positional Scales — scale-ch","text":"number ones format axis text decimal format. percent ones format axis text percentages. currency ones format axis text currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-ch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Swiss Style Positional Scales — scale-ch","text":"","code":"demo_number(c(-1e6, 1e6), scale_name = \"number_ch\") #> scale_x_number_ch()  # scale_x_number_ch() demo_number(c(-1, 1), scale_name = \"percent_ch\") #> scale_x_percent_ch()  # scale_x_percent_ch() demo_number(c(-1e4, 1e4), scale_name = \"currency_ch\") #> scale_x_currency_ch()  # scale_x_currency_ch()"},{"path":"https://trekonom.github.io/countryscales/reference/scale-de.html","id":null,"dir":"Reference","previous_headings":"","what":"German Style Positional Scales — scale-de","title":"German Style Positional Scales — scale-de","text":"scale_xxx_xxx family functions makes easy format axis text decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"German Style Positional Scales — scale-de","text":"","code":"scale_x_number_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_y_number_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_x_percent_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_y_percent_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_x_currency_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   currency = \"EUR\",   trim = TRUE,   ... )  scale_y_currency_de(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   currency = \"EUR\",   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/scale-de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"German Style Positional Scales — scale-de","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. breaks One : NULL breaks waiver() default breaks computed transformation object numeric vector positions function takes limits input returns breaks output (e.g., function returned scales::extended_breaks()). Note position scales, limits provided scale expansion. Also accepts rlang lambda function notation. minor_breaks One : NULL minor breaks waiver() default breaks (one minor break major break) numeric vector positions function given limits returns vector minor breaks. Also accepts rlang lambda function notation. function two arguments, given limits major breaks. guide function used create guide name. See guides() information. n.breaks integer guiding number major breaks. algorithm may choose slightly different number ensure nice break labels. effect breaks = waiver(). Use NULL use default number breaks given transformation. labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) expression vector (must length breaks). See ?plotmath details. function takes breaks input returns labels output. Also accepts rlang lambda function notation. limits One : NULL use default scale range numeric vector length two providing limits scale. Use NA refer existing minimum maximum function accepts existing (automatic) limits returns new limits. Also accepts rlang lambda function notation. Note setting limits positional scales remove data outside limits. purpose zoom, use limit argument coordinate system (see coord_cartesian()). expand position scales, vector range expansion constants used add padding around data ensure placed distance away axes. Use convenience function expansion() generate values expand argument. defaults expand scale 5% side continuous variables, 0.6 units side discrete variables. oob One : Function handles limits outside scale limits (bounds). Also accepts rlang lambda function notation. default (scales::censor()) replaces bounds values NA. scales::squish() squishing bounds values range. scales::squish_infinite() squishing infinite values range. na.value Missing values replaced value. trans Deprecated favour transform. position position scales, position axis. left right y axes, top bottom x axes. sec.axis sec_axis() used specify secondary axis. accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Additional text display number. suffix applied absolute value style_positive style_negative processed prefix = \"$\" yield (e.g.) -$1 ($1). suffix Additional text display number. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed scale_(x|y)_continuous() currency currency symbol","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"German Style Positional Scales — scale-de","text":"number ones format axis text decimal format. percent ones format axis text percentages. currency ones format axis text currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"German Style Positional Scales — scale-de","text":"","code":"if (FALSE) { # \\dontrun{ demo_number(c(-1e6, 1e6), scale_name = \"number_de\") demo_number(c(-1, 1), scale_name = \"percent_de\") demo_number(c(-1e4, 1e4), scale_name = \"currency_de\") } # }"},{"path":"https://trekonom.github.io/countryscales/reference/scale-locale.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Positional Scales — scale-locale","title":"Formatted Positional Scales — scale-locale","text":"scale_x/y_xxx_xxx family functions makes easy format axis text decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-locale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Positional Scales — scale-locale","text":"","code":"scale_x_number_locale(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   locale = \"en-US\",   trim = TRUE,   ... )  scale_y_number_locale(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   locale = \"en-US\",   trim = TRUE,   ... )  scale_x_percent_locale(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   locale = \"en-US\",   trim = TRUE,   ... )  scale_y_percent_locale(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   locale = \"en-US\",   trim = TRUE,   ... )  scale_x_currency_locale(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   locale = \"en-US\",   currency = \"USD\",   trim = TRUE,   ... )  scale_y_currency_locale(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   locale = \"en-US\",   currency = \"USD\",   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/scale-locale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted Positional Scales — scale-locale","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. breaks One : NULL breaks waiver() default breaks computed transformation object numeric vector positions function takes limits input returns breaks output (e.g., function returned scales::extended_breaks()). Note position scales, limits provided scale expansion. Also accepts rlang lambda function notation. minor_breaks One : NULL minor breaks waiver() default breaks (one minor break major break) numeric vector positions function given limits returns vector minor breaks. Also accepts rlang lambda function notation. function two arguments, given limits major breaks. guide function used create guide name. See guides() information. n.breaks integer guiding number major breaks. algorithm may choose slightly different number ensure nice break labels. effect breaks = waiver(). Use NULL use default number breaks given transformation. labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) expression vector (must length breaks). See ?plotmath details. function takes breaks input returns labels output. Also accepts rlang lambda function notation. limits One : NULL use default scale range numeric vector length two providing limits scale. Use NA refer existing minimum maximum function accepts existing (automatic) limits returns new limits. Also accepts rlang lambda function notation. Note setting limits positional scales remove data outside limits. purpose zoom, use limit argument coordinate system (see coord_cartesian()). expand position scales, vector range expansion constants used add padding around data ensure placed distance away axes. Use convenience function expansion() generate values expand argument. defaults expand scale 5% side continuous variables, 0.6 units side discrete variables. oob One : Function handles limits outside scale limits (bounds). Also accepts rlang lambda function notation. default (scales::censor()) replaces bounds values NA. scales::squish() squishing bounds values range. scales::squish_infinite() squishing infinite values range. na.value Missing values replaced value. trans Deprecated favour transform. position position scales, position axis. left right y axes, top bottom x axes. sec.axis sec_axis() used specify secondary axis. accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Additional text display number. suffix applied absolute value style_positive style_negative processed prefix = \"$\" yield (e.g.) -$1 ($1). suffix Additional text display number. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. locale locale string. Defaults \"en-US\" trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed scale_(x|y)_continuous() currency currency symbol","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-locale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Formatted Positional Scales — scale-locale","text":"number ones format axis text decimal format. percent ones format axis text percentages. currency ones format axis text currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-locale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatted Positional Scales — scale-locale","text":"","code":"if (FALSE) { # \\dontrun{ demo_number(c(-1e6, 1e6), scale_name = \"number_locale\", locale = \"fr-FR\") demo_number(c(-1, 1), scale_name = \"percent_locale\", locale = \"it-IT\") demo_number(c(-1e4, 1e4),   scale_name = \"currency_locale\",   locale = \"ja-JP\", currency = \"JPY\" ) } # }"},{"path":"https://trekonom.github.io/countryscales/reference/scale-us.html","id":null,"dir":"Reference","previous_headings":"","what":"US Style Positional Scales — scale-us","title":"US Style Positional Scales — scale-us","text":"scale_xxx_xxx family functions makes easy format axis text decimal format, percentages currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-us.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US Style Positional Scales — scale-us","text":"","code":"scale_x_number_us(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_y_number_us(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = \"\",   suffix = \"\",   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_x_percent_us(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_y_percent_us(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"left\",   sec.axis = waiver(),   accuracy = 1,   scale = 100,   prefix = \"\",   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   trim = TRUE,   ... )  scale_x_currency_us(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   currency = \"USD\",   trim = TRUE,   ... )  scale_y_currency_us(   name = waiver(),   breaks = waiver(),   minor_breaks = waiver(),   guide = waiver(),   n.breaks = NULL,   labels = waiver(),   limits = NULL,   expand = waiver(),   oob = censor,   na.value = NA_real_,   trans = \"identity\",   position = \"bottom\",   sec.axis = waiver(),   accuracy = 1,   scale = 1,   prefix = NULL,   suffix = NULL,   big.mark = NULL,   decimal.mark = NULL,   currency = \"USD\",   trim = TRUE,   ... )"},{"path":"https://trekonom.github.io/countryscales/reference/scale-us.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"US Style Positional Scales — scale-us","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. breaks One : NULL breaks waiver() default breaks computed transformation object numeric vector positions function takes limits input returns breaks output (e.g., function returned scales::extended_breaks()). Note position scales, limits provided scale expansion. Also accepts rlang lambda function notation. minor_breaks One : NULL minor breaks waiver() default breaks (one minor break major break) numeric vector positions function given limits returns vector minor breaks. Also accepts rlang lambda function notation. function two arguments, given limits major breaks. guide function used create guide name. See guides() information. n.breaks integer guiding number major breaks. algorithm may choose slightly different number ensure nice break labels. effect breaks = waiver(). Use NULL use default number breaks given transformation. labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) expression vector (must length breaks). See ?plotmath details. function takes breaks input returns labels output. Also accepts rlang lambda function notation. limits One : NULL use default scale range numeric vector length two providing limits scale. Use NA refer existing minimum maximum function accepts existing (automatic) limits returns new limits. Also accepts rlang lambda function notation. Note setting limits positional scales remove data outside limits. purpose zoom, use limit argument coordinate system (see coord_cartesian()). expand position scales, vector range expansion constants used add padding around data ensure placed distance away axes. Use convenience function expansion() generate values expand argument. defaults expand scale 5% side continuous variables, 0.6 units side discrete variables. oob One : Function handles limits outside scale limits (bounds). Also accepts rlang lambda function notation. default (scales::censor()) replaces bounds values NA. scales::squish() squishing bounds values range. scales::squish_infinite() squishing infinite values range. na.value Missing values replaced value. trans Deprecated favour transform. position position scales, position axis. left right y axes, top bottom x axes. sec.axis sec_axis() used specify secondary axis. accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Additional text display number. suffix applied absolute value style_positive style_negative processed prefix = \"$\" yield (e.g.) -$1 ($1). suffix Additional text display number. big.mark Character used every 3 digits separate thousands. decimal.mark character used indicate numeric decimal point. trim Logical, FALSE, values right-justified common width (see base::format()). ... arguments passed scale_(x|y)_continuous() currency currency symbol","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-us.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"US Style Positional Scales — scale-us","text":"number ones format axis text decimal format. percent ones format axis text percentages. currency ones format axis text currencies.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/scale-us.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"US Style Positional Scales — scale-us","text":"","code":"demo_number(c(-1e6, 1e6), scale_name = \"number_us\") #> scale_x_number_us()  # scale_x_number_us() demo_number(c(-1, 1), scale_name = \"percent_us\") #> scale_x_percent_us()  # scale_x_percent_us() demo_number(c(-1e4, 1e4), scale_name = \"currency_us\") #> scale_x_currency_us()  # scale_x_currency_us()"},{"path":"https://trekonom.github.io/countryscales/reference/show_locales.html","id":null,"dir":"Reference","previous_headings":"","what":"Locales — show_locales","title":"Locales — show_locales","text":"convenience function returns dataframe available locales countries.","code":""},{"path":"https://trekonom.github.io/countryscales/reference/show_locales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locales — show_locales","text":"","code":"show_locales()"},{"path":"https://trekonom.github.io/countryscales/reference/show_locales.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locales — show_locales","text":"dataframe","code":""},{"path":"https://trekonom.github.io/countryscales/reference/show_locales.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locales — show_locales","text":"","code":"show_locales() #> # A tibble: 764 × 1 #>    locale #>    <chr>  #>  1 af     #>  2 af-NA  #>  3 af-ZA  #>  4 agq    #>  5 agq-CM #>  6 ak     #>  7 ak-GH  #>  8 am     #>  9 am-ET  #> 10 ar     #> # ℹ 754 more rows"}]
